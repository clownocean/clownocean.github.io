{"title":"Netty","date":"2022-11-11T23:15:45.000Z","date_formatted":{"ll":"Nov 12, 2022","L":"11/12/2022","MM-DD":"11-12"},"link":"2022/11/12/Netty","updated":"2022-11-11T23:29:17.637Z","content":"<h1 id=\"bio、nio、aio\">BIO、NIO、AIO<a title=\"#bio、nio、aio\" href=\"#bio、nio、aio\"></a></h1>\n<p>BIO【Blocking I/O】同步阻塞I/O模式</p>\n<p>传统的通信方式，模式简单使用方便。但并发处理能力低，通信耗时，依赖网速。</p>\n<p>NIO【New I/O】 同步非阻塞模式</p>\n<p>Non-Block IO，Java SE1.4版以后，针对网络传输效能优化的新功能，是一种非阻塞同步的通信模式。</p>\n<p>NIO与原来的I/O有相同的作用和目的，它们之间最重要的区别是数据打包和传输方式。原来的I/O以流的方式处理数据，而NIO以块的方式处理数据。</p>\n<ul>\n<li>\n<p>面向流的I/O系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。</p>\n</li>\n<li>\n<p>面向块的I/O系统以块的形式处理数据，每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按字节处理数据要快的多。但是面向块的I/O缺少一些面向流的I/O所具有的优雅性和简单性。</p>\n</li>\n</ul>\n<p>AIO【Asynchronous I/O】异步非阻塞I/O模型</p>\n<p>在NIO基础上引入新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。</p>\n","prev":{"title":"Elasticsearch","link":"2022/11/16/Elasticsearch"},"next":{"title":"Minio","link":"2022/11/03/Minio"},"plink":"http://example.com/2022/11/12/Netty/","toc":[{"id":"bio、nio、aio","title":"BIO、NIO、AIO","index":"1"}],"reading_time":"336 words in 2 min"}